<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>// this file is autogenerated by T4. See MockextensionPlugin_Tests.tt file
#nullable enable
using Microsoft.Extensions.DependencyInjection;
using Plugin.Toast;
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;

namespace DeviceTests.Mocks
{
    public class MockExtensionPlugin_Tests
    {
        [Fact]
        public void Construct()
        {
            var mep = new MockExtensionPlugin();

            <#=string.Join(";\n\t\t\t", EnumerateNumParams("Assert.Equal(expected: 0, mep.UwpConfigureCallCount{0})", KMagicCount))#>;
            <#=string.Join(";\n\t\t\t", EnumerateNumParams("Assert.Equal(expected: 0, mep.DroidConfigureCallCount{0})", KMagicCount))#>;
            <#=string.Join(";\n\t\t\t", EnumerateNumParams("Assert.Equal(expected: 0, mep.SnackbarConfigureCallCount{0})", KMagicCount))#>;
            <#=string.Join(";\n\t\t\t", EnumerateNumParams("Assert.Equal(expected: 0, mep.IosConfigureCallCount{0})", KMagicCount))#>;
            <#=string.Join(";\n\t\t\t", EnumerateNumParams("Assert.Equal(expected: 0, mep.IosLocalConfigureCallCount{0})", KMagicCount))#>;

            mep.VerifyNoOtherCalls();
        }

        [Fact]
        public void VerifyNoOtherCalls()
        => Platform.iOS_InvokeOnMainThreadAsync(() =>
        {
<#          
        CreatePluginAndContainer();
#>

            var builder = sp.GetService<IBuilder>();
            builder.Add(new object());

            Assert.ThrowsAny<Exception>(() => mep.VerifyNoOtherCalls());
        });

<#   
    for (int i = 1; i <= KMagicCount; i++)
    {
        CreateInjectTests(i);
    }
#>

        ServiceProvider CreateContainer(Action<IServiceCollection>? configuration = null)
        {
            var sc = new ServiceCollection();
            configuration?.Invoke(sc);
#if __ANDROID__
            sc.AddNotificationManager(new ToastOptions(Platform.Activity));
#else
            sc.AddNotificationManager(new ToastOptions());
#endif
            return sc.BuildServiceProvider();
        }

    }
}

<#+

const int KMagicCount = 9;

private IEnumerable<string> EnumerateNumParams(string format, int count)
{
    for (int i = 1; i <= count; i++)
        yield return string.Format(format, i);
}

private IEnumerable<string> EnumerateDuplicateParams(string format, string duplicateFormat, string separator, int count)
{
	for (int i = 1; i <= count; i++)
		yield return string.Format(format, string.Join(separator, EnumerateNumParams(duplicateFormat, i)), i);
}

private void AddSingleton(string extension, int count)
{#>
            .AddSingleton<IExtensionPlugin<<#=extension#>, <#=string.Join(", ", Enumerable.Repeat("object", count))#>>>(mep)
<#+
}

private void AddSingletons(string extension)
{
    for (int i = 1; i <= KMagicCount; i++)
    {
        AddSingleton(extension, i);
    }
}

private void CreatePluginAndContainer()
{
#>
            var mep = new MockExtensionPlugin();

            using var sp = CreateContainer(_ => _
<#+
    AddSingletons("IUwpExtension");
    AddSingletons("IDroidNotificationExtension");
    AddSingletons("ISnackbarExtension");
    AddSingletons("IIosLocalNotificationExtension");
    AddSingletons("IIosNotificationExtension");
#>
            );

<#+
}

private void CreateExpectedVariables(int count)
{
    for (int i = 1; i <= count; i++)
    {
#>
            var expected<#=i#> = new object();
<#+
    }
}

private void CreateAssertHandlers(int count)
{
    CreateAssertHandler("Uwp", count);
    CreateAssertHandler("Droid", count);
    CreateAssertHandler("Snackbar", count);
    CreateAssertHandler("Ios", count);
    CreateAssertHandler("IosLocal", count);
}

private void CreateAssertHandler(string handler, int count)
{
#>
            mep.On<#=handler#>Configure<#=count#> = (<#+CreateLambdaParams("a", count);#>) =>
            {
<#+
    for (int i = 1; i <= count; i++)
    {
#>
                Assert.Same(expected<#=i#>, a<#=i#>);
<#+
    }
#>
            };

<#+
}

private void CreateLambdaParams(string param, int count)
{
    for (int i = 1; i <= count; i++)
    {
        #><#=param#><#=i#><#+
        if (i != count)
        {
        #>, <#+
        }
    }
}

private void AddBuilderParams(int count)
{
#>
            builder.Add(<#+
    for (int i = 1; i <= count; i++)
    {
#>expected<#=i#><#+
        if (i != count)
        {
#>, <#+
        }
    }
#>
);
<#+
}

private void CreateVerification(int count)
{
#>

#if __ANDROID__
            Assert.Equal(1, mep.DroidConfigureCallCount<#=count#>);
#elif __IOS__
            Assert.Equal(1, mep.IosConfigureCallCount<#=count#>);
#elif NETFX_CORE
            Assert.Equal(1, mep.UwpConfigureCallCount<#=count#>);
#else
#error platform not supported
#endif
<#+
}

private void CreateVerificationAlt(int count)
{
#>

#if __ANDROID__
            Assert.Equal(1, mep.SnackbarConfigureCallCount<#=count#>);
#elif __IOS__
            Assert.Equal(1, mep.IosConfigureCallCount<#=count#>);
#elif NETFX_CORE
            Assert.Equal(1, mep.UwpConfigureCallCount<#=count#>);
#else
#error platform not supported
#endif
<#+
}

private void CreateInjectTests(int count)
{
#>
        [Fact]
        public void Inject<#=count#>()
        => Platform.iOS_InvokeOnMainThreadAsync(() =>
        {
<#+         CreateExpectedVariables(count);
            CreatePluginAndContainer();
            CreateAssertHandlers(count);
#>

            var builder = sp.GetService<IBuilder>();
<#+         AddBuilderParams(count);
            CreateVerification(count);
#>

            mep.VerifyNoOtherCalls();
        });

        [Fact]
        public void InjectAlt<#=count#>()
        => Platform.iOS_InvokeOnMainThreadAsync(() =>
        {
<#+         
    CreateExpectedVariables(count);
    CreatePluginAndContainer();
    CreateAssertHandlers(count);
#>

            var builder = sp.GetService<IBuilder<ISnackbarExtension, IIosLocalNotificationExtension>>();
<#+         
    AddBuilderParams(count);
    CreateVerificationAlt(count);
#>

            mep.VerifyNoOtherCalls();
        });

<#+

}

#>