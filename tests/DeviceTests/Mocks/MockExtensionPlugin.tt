<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> // this file is autogenerated by T4. See MockextensionPlugin.tt file
#nullable enable
using Plugin.Toast;
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;

namespace DeviceTests.Mocks
{
	sealed class MockExtensionPlugin :
	<#const int KMockCount = 9;#>
	<#=string.Join(",\n\t\t", EnumerateDuplicateParams("IExtensionPlugin<IUwpExtension, {0}>", "object", ", ", KMockCount))#>,
		<#=string.Join(",\n\t\t", EnumerateDuplicateParams("IExtensionPlugin<IDroidNotificationExtension, {0}>", "object", ", ", KMockCount))#>,
		<#=string.Join(",\n\t\t", EnumerateDuplicateParams("IExtensionPlugin<ISnackbarExtension, {0}>", "object", ", ", KMockCount))#>,
		<#=string.Join(",\n\t\t", EnumerateDuplicateParams("IExtensionPlugin<IIosNotificationExtension, {0}>", "object", ", ", KMockCount))#>,
		<#=string.Join(",\n\t\t", EnumerateDuplicateParams("IExtensionPlugin<IIosLocalNotificationExtension, {0}>", "object", ", ", KMockCount))#>
	{
		<#foreach (var i in EnumerateDuplicateParams(GetterSetterTemplate("Uwp"), "object", ", ", KMockCount)) {#>
<#=i#>
		<#}#>

		<#foreach (var i in EnumerateDuplicateParams(GetterSetterTemplate("Droid"), "object", ", ", KMockCount)) {#>
<#=i#>
		<#}#>

		<#foreach (var i in EnumerateDuplicateParams(GetterSetterTemplate("Snackbar"), "object", ", ", KMockCount)) {#>
<#=i#>
		<#}#>

		<#foreach (var i in EnumerateDuplicateParams(GetterSetterTemplate("Ios"), "object", ", ", KMockCount)) {#>
<#=i#>
		<#}#>

		<#foreach (var i in EnumerateDuplicateParams(GetterSetterTemplate("IosLocal"), "object", ", ", KMockCount)) {#>
<#=i#>
		<#}#>

		<#{var funcNames = EnumerateDuplicateParams(DeclarationTemplate("IUwpExtension"), "object a{0}", ", ", KMockCount).ToArray();
		var bodyList = EnumerateDuplicateParams(BodyTemplate("Uwp"), "a{0}", ", ", KMockCount).ToArray();
		for (int i = 0; i < KMockCount; i++) {#>
<#=funcNames[i]#>
		{
			<#=bodyList[i]#>
		}
		<#}}#>

		<#{var funcNames = EnumerateDuplicateParams(DeclarationTemplate("IDroidNotificationExtension"), "object a{0}", ", ", KMockCount).ToArray();
		var bodyList = EnumerateDuplicateParams(BodyTemplate("Droid"), "a{0}", ", ", KMockCount).ToArray();
		for (int i = 0; i < KMockCount; i++) {#>
<#=funcNames[i]#>
		{
			<#=bodyList[i]#>
		}
		<#}}#>

		<#{var funcNames = EnumerateDuplicateParams(DeclarationTemplate("ISnackbarExtension"), "object a{0}", ", ", KMockCount).ToArray();
		var bodyList = EnumerateDuplicateParams(BodyTemplate("Snackbar"), "a{0}", ", ", KMockCount).ToArray();
		for (int i = 0; i < KMockCount; i++) {#>
<#=funcNames[i]#>
		{
			<#=bodyList[i]#>
		}
		<#}}#>

		<#{var funcNames = EnumerateDuplicateParams(DeclarationTemplate("IIosNotificationExtension"), "object a{0}", ", ", KMockCount).ToArray();
		var bodyList = EnumerateDuplicateParams(BodyTemplate("Ios"), "a{0}", ", ", KMockCount).ToArray();
		for (int i = 0; i < KMockCount; i++) {#>
<#=funcNames[i]#>
		{
			<#=bodyList[i]#>
		}
		<#}}#>

		<#{var funcNames = EnumerateDuplicateParams(DeclarationTemplate("IIosLocalNotificationExtension"), "object a{0}", ", ", KMockCount).ToArray();
		var bodyList = EnumerateDuplicateParams(BodyTemplate("IosLocal"), "a{0}", ", ", KMockCount).ToArray();
		for (int i = 0; i < KMockCount; i++) {#>
<#=funcNames[i]#>
		{
			<#=bodyList[i]#>
		}
		<#}}#>


		public void VerifyNoOtherCalls()
		{
<# foreach (var p in new string[] { "Uwp", "Droid", "Snackbar", "Ios", "IosLocal" })
   for (int i = 1; i <= KMockCount; i++) {#>
			<#=AssertLine(p, i)#>
<#}#>
		}
	}
}

<#+
private IEnumerable<string> EnumerateNumParams(string format, int count)
{
    for (int i = 1; i <= count; i++)
        yield return string.Format(format, i);
}

private IEnumerable<string> EnumerateDuplicateParams(string format, string duplicateFormat, string separator, int count)
{
	for (int i = 1; i <= count; i++)
		yield return string.Format(format, string.Join(separator, EnumerateNumParams(duplicateFormat, i)), i);
}

private string GetterSetterTemplate(string param)
{
	return string.Format(@"
		bool _{0}ConfigureCallCountVerified{{1}};
		int _{0}ConfigureCallCount{{1}};
		public int {1}ConfigureCallCount{{1}}
		{{{{
			get
			{{{{
				_{0}ConfigureCallCountVerified{{1}} = true;
				return _{0}ConfigureCallCount{{1}};
			}}}}
		}}}}
		public Action<{{0}}>? On{1}Configure{{1}} = null;", param.ToLower(), param);
}

private string DeclarationTemplate(string extension)
{
	return string.Format(@"public void Configure({0} extension, {{0}})", extension);
}

private string BodyTemplate(string param)
{
	return string.Format(@"_{1}ConfigureCallCount{{1}}++;
			On{0}Configure{{1}}?.Invoke({{0}});", param, param.ToLower());
}

private string AssertLine(string param, int index)
{
	return string.Format(@"Assert.True(_{0}ConfigureCallCountVerified{2} == true || {1}ConfigureCallCount{2} == 0, ""detected unverified call to {0} configure with {2} params"");", param.ToLower(), param, index);
}

#>